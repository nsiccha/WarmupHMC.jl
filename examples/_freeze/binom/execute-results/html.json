{
  "hash": "2dc5f61074568aaf3b6d47e0ec8581ba",
  "result": {
    "markdown": "---\ntitle:  Using posteriordb reference draws\n---\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nif pwd()[end] != 's'\n    using Revise\n    using Pkg\n    cd(\"examples\")\n    Pkg.activate(\".\")\n    # Base.display(d::VSCodeServer.InlineDisplay, what::Plot) = display(d, what.figure)\nend\nincludet(\"common.jl\")\nRandom.seed!(1) \n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nTaskLocalRNG()\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n\"\"\"\nparameters {\n    real mu;                                                // population mean of success log-odds\n    real<lower=0> sigma;                                    // population sd of success log-odds\n    vector[n_opponents] alpha;                              // success log-odds\n}\n\"\"\"\n@dynamic_object BinomInfo <: DistributionInfo data::Dict\nxcs_idxs(what::BinomInfo) = 3:2+what[\"n_opponents\"]\nmeans_idxs(what::BinomInfo) = 1\nlog_sds_idxs(what::BinomInfo) = 2\ncenteredness(what::BinomInfo) = 1\n\nbinom_dist(data_path) = (\n    json_string = read(open(data_path, \"r\"), String);\n    BSDistribution(StanModel(\n        stan_file=\"binom/model.stan\", \n        data=json_string\n    ), info=BinomInfo(JSON.parse(json_string)))\n)\n\nfunction nbc_draws(dist)\n    no_xcs = length(dist.info.xcs_idxs)\n    nc_draws = recenter(dist, zeros(no_xcs)).cached_unconstrained_chains\n    bc_draws = recenter(dist, nc_draws.best_centeredness).cached_unconstrained_chains\n    c_draws = recenter(dist, ones(no_xcs)).cached_unconstrained_chains\n\n    [nc_draws, bc_draws, c_draws] .|> (draws->recenter(draws, 1) |> update(:effs))\nend\n\nfunction effs_plot(dist, rel=false, means=true)\n    parameter_idxs = 1:dist.no_dimensions\n    nbc_draws = dist.cached_nbc_draws \n    effs = getproperty.(nbc_draws, means ? :effs : :sq_effs)\n    sort_idxs = sortperm(vec(minimum(hcat(effs...), dims=2)))\n    effs = [eff[sort_idxs] for eff in effs]\n    if rel\n        effs = [eff ./ effs[2] for eff in effs]\n        Line(\n            parameter_idxs, effs, \n            plot_kwargs=(ylim=(0, Inf), \n            label=[\"non-centered\" \"adaptive\" \"centered\"], color=[:blue :red :green])\n        )\n    else\n        Line(\n            parameter_idxs, effs, \n            plot_kwargs=(ylim=(0, Inf), label=[\"non-centered\" \"adaptive\"  \"centered\"])\n        )\n    end\nend \nsq_effs_plot(dist) = effs_plot(dist, false, false)\nrel_effs_plot(dist) = effs_plot(dist, true)\nrel_sq_effs_plot(dist) = effs_plot(dist, true, false)\n\nfunction means_plot(dist)\n    parameter_idxs = 1:dist.no_dimensions\n    nbc_draws = dist.cached_nbc_draws \n    means = mean.(nbc_draws, dims=1)\n    stds = std.(nbc_draws, dims=1)\n    rel_means = [(mean .- means[2])./stds[2] for mean in means][[1,3]]\n    rel_stds = [std./stds[2] for std in stds][[1,3]]\n    colors = [:blue, :green]\n    sum([\n        (\n            Scatter([i], [rel_means[i]], plot_kwargs=(label=\"\", color=color)) \n            + Line([i,i], rel_means[i] .+ [-1, +1] .* rel_stds[i], plot_kwargs=(label=\"\", color=color))\n        )\n        for (color, rel_means, rel_stds) in zip(colors, rel_means, rel_stds)\n        for i in parameter_idxs\n    ])\nend\n\nsummary_plot(dist) = Figure([\n    effs_plot(dist, rel, means)\n    for rel in [false, true], means in [true, false]\n    # dist.effs_plot, dist.rel_effs_plot, dist.means_plot\n])\nfunction convergence_plot(dist)\n    nbc_draws = dist.cached_nbc_draws\n    colors = [:blue, :red, :green]\n    sum([\n        Line(\n            cumsum(getproperty.(chain.all_stats, :n_steps))[1001:end],\n            global_convergence(dist, chain),\n            plot_kwargs=(label=\"\", color=color)\n        )\n        for (color, draws) in zip(colors, nbc_draws)\n        for chain in draws.chains\n    ]) |> update(\n        plot_kwargs=(xlim=(0, Inf), ylim=(-Inf, 1), yaxis=:log)\n    )\nend\nshow_plots(dist) = display.([dist.cached_convergence_plot|> update(\n        plot_kwargs=(xlim=(0, Inf), ylim=(0, 1))\n    ), dist.cached_summary_plot])\n\nbinom_dist(\"binom/data.json\").cached_convergence_plot |> update(\n    plot_kwargs=(xlim=(0, Inf), ylim=(-Inf, 1), yaxis=:log)\n)\n# binom_dist(\"binom/data.json\").cached_summary_plot\n# plot(\n#     [\n#         cumsum(getproperty.(chain.all_stats, :n_steps))[1001:end]\n#         for draws in binom_dist(\"binom/data.json\").cached_nbc_draws\n#         for chain in draws.chains\n#     ],\n#     [\n#         update(chain, reference_distribution=binom_dist(\"binom/data.json\")).global_convergence\n#         for draws in binom_dist(\"binom/data.json\").cached_nbc_draws\n#         for chain in draws.chains\n#     ],\n#     xaxis=:linear, yaxis=:log, ylim=[1e-4, 1],\n#     label=\"\", color=hcat(fill(:red, (1, 4)), fill(:blue, (1, 4)))\n# )\n# convergence_plot(binom_dist(\"binom/data.json\"), binom_dist(\"binom/data.json\").cached_unconstrained_draws)\n# convergence_plot(binom_dist(\"binom/data.json\").cached_nbc_draws[1])\n# binom_dist(\"binom/data.json\").cached_nbc_draws[1].esss\n# binom_dist(\"binom/data.json\").cached_reference_chains.esss\n# nc_draws, bc_draws, c_draws = dist.nbc_draws\n# bc_draws = recenter(draws)\n# nc_draws = recenter(dist, zeros(size(bc_draws.centeredness))).cached_unconstrained_chains\n# bc_redraws = bc_draws.distribution.cached_unconstrained_chains\n\n# (\n#     PairPlots(recenter(nc_draws, 1), 1:10)\n#     + PairPlots(recenter(bc_redraws, 1), 1:10)\n#     + PairPlots(draws, 1:10) \n#     # + PairPlots(recenter(draws, 0), 1:10)' \n#     # + PairPlots(recenter(bc_redraws, 0), 1:10)' \n# )\n\n# CenterednessComparison([nc_draws, bc_draws, c_draws])\n \n# Scatter(draws[:, 1], draws[:, 2]).figure\n# bc_draws = recenter(draws)\n# bc_dist = InfoDistribution(bc_draws.info)\n# logpdf(bc_dist, bc_draws[1,:])\n\n# logpdf(bc_draws.info.distribution, bc_draws.info, bc_draws[1,:])\n# logpdf_gradient(bc_info, bc_draws[1, :])\n# bc_redraws = DynamicObjects.update(\n#     DynamicObjects.cached(bc_dist, :unconstrained_draws),\n#     info=bc_draws.info\n# )\n# scatter(draws.best_centeredness, [\n#     nc_draws.best_centeredness,\n#     bc_draws.best_centeredness,\n#     draws.best_centeredness\n# ])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/github/WarmupHMC.jl/examples/binom/model_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n![](figs/17258086828131926348.png)\n\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nbinom_dist(\"binom/data2.json\") |> show_plots;\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/github/WarmupHMC.jl/examples/binom/model_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/7744809079314092434.png)\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSaving figs/7744809079314092434.png.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/5689053349633130226.png)\n\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nPDBPosterior(\n    \"eight_schools-eight_schools_centered\", info_wrapper=EightSchoolsInfo\n).bridgestan_distribution |> show_plots;\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/.julia/artifacts/95c3074bd791a2f28857088639b48ca1b786459a/posteriordb-0.4.0/posterior_database/models/stan/eight_schools_centered_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/2224432746296052992.png)\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSaving figs/2224432746296052992.png.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/1852961709452986713.png)\n\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nPDBPosterior(\n    \"radon_mn-radon_hierarchical_intercept_centered\", info_wrapper=RadonICInfo\n).bridgestan_distribution |> show_plots;\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/.julia/artifacts/95c3074bd791a2f28857088639b48ca1b786459a/posteriordb-0.4.0/posterior_database/models/stan/radon_hierarchical_intercept_centered_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/18326102585252186024.png)\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSaving figs/18326102585252186024.png.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/8784504622406505212.png)\n\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nPDBPosterior(\n    \"radon_mn-radon_variable_intercept_slope_centered\", info_wrapper=RadonISCInfo\n).bridgestan_distribution |> show_plots;\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/.julia/artifacts/95c3074bd791a2f28857088639b48ca1b786459a/posteriordb-0.4.0/posterior_database/models/stan/radon_variable_intercept_slope_centered_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/5533663516827080904.png)\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSaving figs/5533663516827080904.png.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/431378478321114142.png)\n\n:::\n:::\n\n\n```{.julia}\nPDBPosterior(\n    \"radon_all-radon_hierarchical_intercept_centered\", info_wrapper=RadonICInfo\n).bridgestan_distribution |> show_plots;\n```\n```{.julia}\nPDBPosterior(\n    \"radon_all-radon_variable_intercept_slope_centered\", info_wrapper=RadonISCInfo\n).bridgestan_distribution |> show_plots;\n```\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nPairPlots(\n    mcycle_dist(\"homoscedastic\").cached_unconstrained_draws, 1:20\n) + PairPlots(\n    recenter(mcycle_dist(\"homoscedastic_centered\").cached_unconstrained_draws, 0), 1:20\n)\nmcycle_dist(\"homoscedastic_centered\") |> show_plots;\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n┌ Warning: Loading a shared object '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic_centered_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n┌ Warning: Loading a shared object '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic_centered_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan ~/.julia/packages/BridgeStan/nCPwJ/src/model.jl:51\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/8682276540219863466.png)\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSaving figs/8682276540219863466.png.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/8768710273742211020.png)\n\n:::\n:::\n\n\n",
    "supporting": [
      "binom_files"
    ],
    "filters": [],
    "includes": {}
  }
}