{
  "hash": "ba5708d5644ed84407f85142f15b80e2",
  "result": {
    "markdown": "---\ntitle: Using posteriordb reference draws\nexecute:\n  daemon: 999999\n---\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# push!(LOAD_PATH,\"../src/\")\nincludet(\"common.jl\")\nusing PosteriorDB\nusing Statistics, LinearAlgebra, ForwardDiff, DataFrames\nusing Plots\nusing Random\nRandom.seed!(1) \n\n\n\"\"\"\nA posteriorDB posterior.\n\"\"\"\n@dynamic_object PDBPosterior name::String\n\ndatabase(what::PDBPosterior) = PosteriorDB.database()\nposterior(what::PDBPosterior) = PosteriorDB.posterior(what.database, what.name)\nmodel(what::PDBPosterior) = PosteriorDB.model(what.posterior)\ndataset(what::PDBPosterior) = PosteriorDB.dataset(what.posterior)\ndatastring(what::PDBPosterior) = PosteriorDB.load(what.dataset, String)\nreference_posterior(what::PDBPosterior) = PosteriorDB.reference_posterior(what.posterior)\nconstrained_df(what::PDBPosterior) = DataFrame(PosteriorDB.load(what.reference_posterior))\nconstrained_draws(what::PDBPosterior) = hcat([vcat(col...) for col in eachcol(what.constrained_df)]...)\nstan_file(what::PDBPosterior) = PosteriorDB.path(PosteriorDB.implementation(what.model, \"stan\"))\nbridgestan_model(what::PDBPosterior) = StanModel(stan_file=what.stan_file, data=what.datastring)\nunconstrained_draws(what::PDBPosterior) = (\n    bmod = what.bridgestan_model;\n    vcat([\n        param_unconstrain(bmod, collect(row))' for row in eachrow(what.constrained_draws)\n    ]...) \n)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nunconstrained_draws (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nes_draws = EightSchoolsDraws(PDBPosterior(\"eight_schools-eight_schools_centered\").unconstrained_draws)\nes_draws.scatter_funnel\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/.julia/artifacts/95c3074bd791a2f28857088639b48ca1b786459a/posteriordb-0.4.0/posterior_database/models/stan/eight_schools_centered_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan /home/niko/.julia/packages/BridgeStan/ajc6B/src/model.jl:50\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](figs/9174317401172927985.png)\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nFigure([\n    PlotSum([\n        kl_plot(es_subset, i) for i in 1:8\n    ])\n    for es_subset in subset.([es_draws], [4,8,16,32,64])\n]')\n```\n\n::: {.cell-output .cell-output-display}\n![](figs/10115332218132280252.png)\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n\"\"\"\nReparametrizations.\n\"\"\"\n@dynamic_type Reparametrization\n\n@dynamic_object PartialUncentering <: Reparametrization centeredness::Vector\npad_left(what, to_match::AbstractVector) = what\npad_left(what, to_match::AbstractMatrix) = what'\nreparametrize(what::PartialUncentering, parameters) = replace_xcs(\n    parameters,\n    to_xc.(parameters.xcs, parameters.means, parameters.log_sds, pad_left(what.centeredness, parameters.xcs))\n)\nunreparametrize(what::PartialUncentering, reparameters) = replace_xcs(\n    reparameters,\n    to_x1.(reparameters.xcs, reparameters.means, reparameters.log_sds, pad_left(what.centeredness, reparameters.xcs))\n)\nlogjacobian(what::PartialUncentering, parameters, reparameters) = sum(\n    parameters.log_sds .* what.centeredness\n)\n\npu = PartialUncentering(zeros(8))\nres_draws = reparametrize(pu, es_draws)\nres_draws.scatter_funnel\n```\n\n::: {.cell-output .cell-output-display}\n![](figs/17021093804709219384.png)\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nes_model = BSModel(PDBPosterior(\"eight_schools-eight_schools_centered\").bridgestan_model)\nres_model = ReparametrizedDistribution(es_model, pu)\n\n# logpdf(res_model, EightSchoolsDraw(zeros(10)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Loading a shared object '/home/niko/.julia/artifacts/95c3074bd791a2f28857088639b48ca1b786459a/posteriordb-0.4.0/posterior_database/models/stan/eight_schools_centered_model.so' which is already loaded.\n│ If the file has changed since the last time it was loaded, this load may not update the library!\n└ @ BridgeStan /home/niko/.julia/packages/BridgeStan/ajc6B/src/model.jl:50\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nReparametrizedDistribution(distribution = BSModel(model = StanModel(Ptr{Nothing} @0x0000000009e168d0, Ptr{BridgeStan.StanModelStruct} @0x0000000009938b90, \"{\\n  \\\"J\\\": 8,\\n  \\\"y\\\": [28, 8, -3, 7, -1, 1, 18, 12],\\n  \\\"sigma\\\": [15, 10, 16, 11, 9, 11, 10, 18]\\n}\\n\", 0x000000cc, 0x00000000),), reparametrization = PartialUncentering(centeredness = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],))\n```\n:::\n:::\n\n\n",
    "supporting": [
      "posteriordb_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}