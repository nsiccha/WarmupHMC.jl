---
title:  Using independent draws 
jupyter: julia-1.8
execute:
  daemon: 999999
---

```{julia}
using DynamicObjects, WarmupHMC
using Distributions, Statistics, LinearAlgebra, ForwardDiff
using Plots

@dynamic_object WarmupWindow no_iterations::Integer type
 
@dynamic_object StanWarmup no_iterations::Number adaptation=:metric
warmup_windows(what::StanWarmup) = [
  WarmupWindow(75, :scale)
  WarmupWindow(25, what.adaptation)
  WarmupWindow(50, what.adaptation)
  WarmupWindow(100, what.adaptation)
  WarmupWindow(200, what.adaptation)
  WarmupWindow(500, what.adaptation)
  WarmupWindow(50, :scale)
]

Distributions.logpdf(what::DynamicObject, parameters) = logpdf(what.distribution, parameters)
no_dimensions(what::DynamicObject) = length(what.distribution)
logpdf_gradient(what::DynamicObject, parameters) = ForwardDiff.gradient(
  theta->logpdf(what, theta), parameters
)

@dynamic_object IndependentKernel distribution::Distribution
@dynamic_object IndependentKernel distribution::DynamicObject
transition(what::IndependentKernel, last) = rand(what.distribution)

@dynamic_object Warmup kernel procedure
# no_dimensions(what::Warmup) = length(what.kernel.distribution)
warmup_windows(what::Warmup) = what.procedure.warmup_windows
covariance(what::DynamicObject) = cov(what.distribution)
covariance_estimate(what::DynamicObject) = LinearAlgebra.I 
function covariance_remaining(what::DynamicObject)
  ce = what.covariance_estimate
  L = isa(ce, UniformScaling) ? I : cholesky(ce).L
  return L \ what.covariance / L'
end
function kernels(what::Warmup)
  current_kernel = what.kernel
  rv = [current_kernel]
  fig = missing

  no_dimensions = current_kernel.no_dimensions
  current_parameters = zeros(no_dimensions)

  for window in what.warmup_windows
    samples = zeros((window.no_iterations, no_dimensions))
    gradients = zeros((window.no_iterations, no_dimensions))
    for iteration in 1:window.no_iterations
      current_parameters .= transition(current_kernel, current_parameters)
      samples[iteration, :] .= current_parameters
      gradients[iteration, :] .= logpdf_gradient(current_kernel, current_parameters)
    end
    scov = cov(samples)
    gcov = cov(gradients)
    if window.type == :metric
      # covariance_estimate = regularize(Symmetric(scov), window.no_iterations)
      covariance_estimate = regularize(Diagonal(sqrt.(diag(scov) ./ diag(gcov))), window.no_iterations)
      current_kernel = DynamicObjects.update(
        current_kernel, covariance_estimate=covariance_estimate
      )
      push!(rv, current_kernel)
    end
    if window.type == :parametrization
      ismissing(fig) && (fig = vline(current_kernel.distribution.centeredness[1:1], ylim=[0,1]))
      # klps_plot!(
      #   fig, 
      #   [x1s(current_kernel.distribution, parameters)[1] for parameters in eachrow(samples)],
      #   [log_sds(current_kernel.distribution, parameters)[1] for parameters in eachrow(samples)]
      # )
      # cs = LinRange(0, 1, 100)
      # x1 = [x1s(current_kernel.distribution, parameters)[1] for parameters in eachrow(samples)]
      # sd = [sds(current_kernel.distribution, parameters)[1] for parameters in eachrow(samples)]
      # # x1, sd = samples[:, 2], samples[:, 1]
      # kl1s = [klp(x1, log.(sd), c) for c in cs]
      # kl1s .-= minimum(kl1s)
      # kl1s ./= maximum(kl1s)
      # plot!(fig, cs, kl1s)
      push!(rv, current_kernel)
    end
  end
  !ismissing(fig) && display(fig)
  return rv
end

showcase(no_dimensions::Integer=10) = showcase(
  MvNormal(randn(no_dimensions), Diagonal(exp.(randn(no_dimensions))))
)
function showcase(distribution, adaptation=:metric)
  sw = StanWarmup(1000, adaptation)
  ikernels = Warmup(IndependentKernel(distribution), sw).kernels
  iconds = cond.(covariance_remaining.(ikernels))
  conds = iconds
  plot(
    [iconds], yaxis=:log, ylim=[1, maximum(conds)], marker=:circle
  )
end
showcase()
```
```{julia}

"""
Neal's funnel with a twist!
"""
@dynamic_object NealsFunnel centeredness::Vector
no_dimensions(what::NealsFunnel) = 1+length(what.centeredness)
Base.length(what::NealsFunnel) = what.no_dimensions
centeredness_estimate(what::NealsFunnel) = ones(length(what.centeredness))
centeredness_remaining(what::NealsFunnel) = what.centeredness - what.centeredness_estimate
Statistics.cov(what::NealsFunnel) = LinearAlgebra.I
log_sds(what::NealsFunnel, parameters) = exp(parameters[1])
x1s(what::NealsFunnel, parameters) = parameters[2:end]
function Distributions.logpdf(what::NealsFunnel, parameters) 
  log_sd = parameters[1]
  sd = exp(log_sd)
  logpdf(Normal(), log_sd) + sum(logpdf.(Normal.(0, sd.^-what.centeredness_remaining), parameters[2:end]))
end
function Base.rand(what::NealsFunnel)
  xis = randn(what.no_dimensions)
  log_sd = xis[1]
  sd = exp(log_sd)
  return vcat(log_sd, sd.^-what.centeredness_remaining .* xis[2:end])
end

showcase(NealsFunnel(rand(5)), :parametrization)
``` 
```{julia}
"""
A distribution which looks a bit like an HSGP posterior!
"""
@dynamic_object HSGP centeredness::Vector L=1.5
no_basis_functions(what::HSGP) = length(what.centeredness)
indices(what::HSGP) = 1:what.no_basis_functions
no_dimensions(what::HSGP) = 2+what.no_basis_functions
Base.length(what::HSGP) = what.no_dimensions
centeredness_estimate(what::HSGP) = ones(what.no_basis_functions)
centeredness_remaining(what::HSGP) = what.centeredness - what.centeredness_estimate
Statistics.cov(what::HSGP) = LinearAlgebra.I
# https://github.com/avehtari/casestudies/blob/master/Birthdays/gpbasisfun_functions.stan
# alpha * sqrt(sqrt(2*pi()) * rho) * exp(-0.25*(rho*pi()/2/L)^2 * linspaced_vector(M, 1, M)^2)
function sds(what::HSGP, parameters) 
  sd, lengthscale = exp.(parameters[1:2])
  sd .* sqrt.(sqrt(2pi*lengthscale) .* exp.(-(lengthscale*pi/4/what.L)^2 .* what.indices))
end
log_sds(what::HSGP, parameters) = log.(sds(what, parameters))
x1s(what::HSGP, parameters) = parameters[3:end]
function Distributions.logpdf(what::HSGP, parameters) 
  log_sd, log_lengthscale = parameters[1:2]
  sd, lengthscale = exp.([log_sd, log_lengthscale])
  sum(
    logpdf.(Normal(), [log_sd, log_lengthscale])
  ) + sum(
    logpdf.(Normal.(0, sds(what, parameters).^-what.centeredness_remaining), parameters[3:end])
  )
end
function Base.rand(what::HSGP)
  xis = randn(what.no_dimensions)
  log_sd, log_lengthscale = xis[1:2]
  return vcat(log_sd, log_lengthscale, sds(what, parameters).^-what.centeredness_remaining .* xis[3:end])
end

showcase(NealsFunnel(rand(5)), :parametrization)  
```