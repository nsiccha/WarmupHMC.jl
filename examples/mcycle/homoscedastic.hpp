// Code generated by stanc v2.32.1
#include <stan/model/model_header.hpp>
namespace homoscedastic_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 131> locations_array__ =
  {" (found before start of program)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 130, column 2 to column 17)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 132, column 2 to column 23)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 134, column 2 to column 25)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 136, column 2 to column 23)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 138, column 2 to column 23)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 140, column 2 to column 29)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 142, column 2 to column 31)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 144, column 2 to column 35)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 148, column 2 to column 33)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 149, column 2 to column 38)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 150, column 2 to column 45)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 151, column 2 to column 50)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 184, column 2 to column 31)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 186, column 2 to column 43)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 152, column 2 to column 22)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 153, column 2 to column 28)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 154, column 2 to column 34)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 155, column 2 to column 40)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 159, column 9 to column 10)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 159, column 2 to column 103)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 161, column 9 to column 10)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 161, column 2 to column 55)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 164, column 4 to column 29)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 162, column 17 to line 165, column 3)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 162, column 2 to line 165, column 3)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 167, column 2 to column 51)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 168, column 2 to line 169, column 40)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 170, column 2 to column 38)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 171, column 2 to column 60)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 172, column 2 to column 55)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 173, column 2 to line 174, column 40)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 175, column 2 to column 44)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 176, column 2 to column 66)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 179, column 4 to column 41)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 178, column 19 to line 180, column 3)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 178, column 2 to line 180, column 3)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 102, column 2 to column 17)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 103, column 9 to column 10)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 103, column 2 to column 14)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 106, column 2 to column 21)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 107, column 2 to column 21)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 109, column 2 to column 22)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 111, column 9 to column 10)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 111, column 12 to column 18)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 111, column 2 to column 26)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 113, column 26 to column 32)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 113, column 9 to column 14)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 113, column 2 to column 34)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 116, column 2 to column 27)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 117, column 2 to column 27)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 119, column 2 to column 28)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 121, column 9 to column 10)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 121, column 12 to column 24)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 121, column 2 to column 38)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 123, column 38 to column 50)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 123, column 9 to column 20)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 123, column 2 to column 52)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 124, column 2 to column 17)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 136, column 9 to column 15)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 144, column 9 to column 21)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 148, column 18 to column 23)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 149, column 31 to column 36)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 149, column 18 to column 19)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 150, column 18 to column 29)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 151, column 37 to column 48)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 151, column 18 to column 19)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 14, column 4 to column 27)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 15, column 4 to column 20)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 16, column 11 to column 12)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 16, column 14 to column 15)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 16, column 4 to column 21)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 22, column 6 to column 50)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 24, column 8 to column 56)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 23, column 23 to line 25, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 23, column 6 to line 25, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 20, column 11 to line 26, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 19, column 6 to column 45)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 17, column 18 to line 20, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 17, column 4 to line 26, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 29, column 6 to column 25)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 27, column 19 to line 30, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 27, column 4 to line 30, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 31, column 4 to column 41)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 13, column 62 to line 32, column 3)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 43, column 4 to column 24)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 44, column 4 to column 23)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 45, column 4 to column 27)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 46, column 11 to column 13)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 46, column 4 to column 19)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 56, column 6 to column 69)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 57, column 13 to column 16)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 57, column 6 to column 59)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 59, column 8 to column 77)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 58, column 22 to line 60, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 58, column 6 to line 60, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 54, column 11 to line 61, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 49, column 6 to column 68)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 50, column 6 to column 55)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 52, column 8 to column 67)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 51, column 22 to line 53, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 51, column 6 to line 53, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 47, column 18 to line 54, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 47, column 4 to line 61, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 62, column 4 to column 15)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 42, column 64 to line 63, column 3)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 65, column 4 to column 24)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 66, column 4 to column 23)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 67, column 4 to column 27)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 68, column 11 to column 13)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 68, column 4 to column 19)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 78, column 6 to column 69)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 79, column 13 to column 16)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 79, column 6 to column 60)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 81, column 8 to column 77)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 80, column 22 to line 82, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 80, column 6 to line 82, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 76, column 11 to line 83, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 71, column 6 to column 66)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 72, column 6 to column 56)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 74, column 8 to column 67)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 73, column 22 to line 75, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 73, column 6 to line 75, column 7)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 69, column 18 to line 76, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 69, column 4 to line 83, column 5)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 84, column 4 to column 23)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 64, column 69 to line 85, column 3)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 97, column 11 to column 18)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 97, column 4 to column 76)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 98, column 4 to column 33)",
  " (in '/home/niko/github/WarmupHMC.jl/examples/mcycle/homoscedastic.stan', line 96, column 79 to line 99, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
gp(const std::vector<Eigen::Matrix<T0__,-1,1>>& x, const T1__& sdgp,
   const T2__& lscale_arg__, const T3__& zgp_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>>,-1,1>
spd_cov_exp_quad(const std::vector<Eigen::Matrix<T0__,-1,1>>& x, const T1__&
                 sdgp, const T2__& lscale_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>>,-1,1>
sqrt_spd_cov_exp_quad(const std::vector<Eigen::Matrix<T0__,-1,1>>& x,
                      const T1__& sdgp, const T2__& lscale_arg__,
                      std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__>,-1,1>
gpa(const T0__& X_arg__, const T1__& sdgp, const T2__& lscale_arg__,
    const T3__& zgp_arg__, const std::vector<Eigen::Matrix<T4__,-1,1>>&
    slambda, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
gp(const std::vector<Eigen::Matrix<T0__,-1,1>>& x, const T1__& sdgp,
   const T2__& lscale_arg__, const T3__& zgp_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& lscale = stan::math::to_ref(lscale_arg__);
  const auto& zgp = stan::math::to_ref(zgp_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int Dls = std::numeric_limits<int>::min();
    current_statement__ = 67;
    Dls = stan::math::rows(lscale);
    int N = std::numeric_limits<int>::min();
    current_statement__ = 68;
    N = stan::math::size(x);
    current_statement__ = 69;
    stan::math::validate_non_negative_index("cov", "N", N);
    current_statement__ = 70;
    stan::math::validate_non_negative_index("cov", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> cov =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
    current_statement__ = 79;
    if (stan::math::logical_eq(Dls, 1)) {
      current_statement__ = 77;
      stan::model::assign(cov,
        stan::math::cov_exp_quad(x, sdgp,
          stan::model::rvalue(lscale, "lscale", stan::model::index_uni(1))),
        "assigning variable cov");
    } else {
      current_statement__ = 72;
      stan::model::assign(cov,
        stan::math::cov_exp_quad(
          stan::model::rvalue(x, "x", stan::model::index_omni(),
            stan::model::index_uni(1)), sdgp,
          stan::model::rvalue(lscale, "lscale", stan::model::index_uni(1))),
        "assigning variable cov");
      current_statement__ = 75;
      for (int d = 2; d <= Dls; ++d) {
        current_statement__ = 73;
        stan::model::assign(cov,
          stan::math::elt_multiply(stan::model::deep_copy(cov),
            stan::math::cov_exp_quad(
              stan::model::rvalue(x, "x", stan::model::index_omni(),
                stan::model::index_uni(d)), 1,
              stan::model::rvalue(lscale, "lscale", stan::model::index_uni(d)))),
          "assigning variable cov");
      }
    }
    current_statement__ = 82;
    for (int n = 1; n <= N; ++n) {
      current_statement__ = 80;
      stan::model::assign(cov,
        (stan::model::rvalue(cov, "cov", stan::model::index_uni(n),
           stan::model::index_uni(n)) + 1e-12), "assigning variable cov",
        stan::model::index_uni(n), stan::model::index_uni(n));
    }
    current_statement__ = 83;
    return stan::math::multiply(stan::math::cholesky_decompose(cov), zgp);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>>,-1,1>
spd_cov_exp_quad(const std::vector<Eigen::Matrix<T0__,-1,1>>& x, const T1__&
                 sdgp, const T2__& lscale_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& lscale = stan::math::to_ref(lscale_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int NB = std::numeric_limits<int>::min();
    current_statement__ = 85;
    NB = stan::model::rvalue(stan::math::dims(x), "dims(x)",
           stan::model::index_uni(1));
    int D = std::numeric_limits<int>::min();
    current_statement__ = 86;
    D = stan::model::rvalue(stan::math::dims(x), "dims(x)",
          stan::model::index_uni(2));
    int Dls = std::numeric_limits<int>::min();
    current_statement__ = 87;
    Dls = stan::math::rows(lscale);
    current_statement__ = 88;
    stan::math::validate_non_negative_index("out", "NB", NB);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NB, DUMMY_VAR__);
    current_statement__ = 103;
    if (stan::math::logical_eq(Dls, 1)) {
      local_scalar_t__ constant = DUMMY_VAR__;
      current_statement__ = 97;
      constant = (stan::math::square(sdgp) *
        stan::math::pow((stan::math::sqrt((2 * stan::math::pi())) *
          stan::model::rvalue(lscale, "lscale", stan::model::index_uni(1))),
          D));
      local_scalar_t__ neg_half_lscale2 = DUMMY_VAR__;
      current_statement__ = 98;
      neg_half_lscale2 = (-0.5 *
        stan::math::square(
          stan::model::rvalue(lscale, "lscale", stan::model::index_uni(1))));
      current_statement__ = 101;
      for (int m = 1; m <= NB; ++m) {
        current_statement__ = 99;
        stan::model::assign(out, (constant *
          stan::math::exp((neg_half_lscale2 *
            stan::math::dot_self(
              stan::model::rvalue(x, "x", stan::model::index_uni(m)))))),
          "assigning variable out", stan::model::index_uni(m));
      }
    } else {
      local_scalar_t__ constant = DUMMY_VAR__;
      current_statement__ = 90;
      constant = ((stan::math::square(sdgp) *
        stan::math::pow(stan::math::sqrt((2 * stan::math::pi())), D)) *
        stan::math::prod(lscale));
      current_statement__ = 91;
      stan::math::validate_non_negative_index("neg_half_lscale2", "Dls", Dls);
      Eigen::Matrix<local_scalar_t__,-1,1> neg_half_lscale2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Dls, DUMMY_VAR__);
      current_statement__ = 92;
      stan::model::assign(neg_half_lscale2,
        stan::math::multiply(-0.5, stan::math::square(lscale)),
        "assigning variable neg_half_lscale2");
      current_statement__ = 95;
      for (int m = 1; m <= NB; ++m) {
        current_statement__ = 93;
        stan::model::assign(out, (constant *
          stan::math::exp(
            stan::math::dot_product(neg_half_lscale2,
              stan::math::square(
                stan::model::rvalue(x, "x", stan::model::index_uni(m)))))),
          "assigning variable out", stan::model::index_uni(m));
      }
    }
    current_statement__ = 104;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>>,-1,1>
sqrt_spd_cov_exp_quad(const std::vector<Eigen::Matrix<T0__,-1,1>>& x,
                      const T1__& sdgp, const T2__& lscale_arg__,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& lscale = stan::math::to_ref(lscale_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int NB = std::numeric_limits<int>::min();
    current_statement__ = 106;
    NB = stan::model::rvalue(stan::math::dims(x), "dims(x)",
           stan::model::index_uni(1));
    int D = std::numeric_limits<int>::min();
    current_statement__ = 107;
    D = stan::model::rvalue(stan::math::dims(x), "dims(x)",
          stan::model::index_uni(2));
    int Dls = std::numeric_limits<int>::min();
    current_statement__ = 108;
    Dls = stan::math::rows(lscale);
    current_statement__ = 109;
    stan::math::validate_non_negative_index("out", "NB", NB);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NB, DUMMY_VAR__);
    current_statement__ = 124;
    if (stan::math::logical_eq(Dls, 1)) {
      local_scalar_t__ constant = DUMMY_VAR__;
      current_statement__ = 118;
      constant = (sdgp *
        stan::math::pow(
          stan::math::sqrt((stan::math::sqrt((2 * stan::math::pi())) *
            stan::model::rvalue(lscale, "lscale", stan::model::index_uni(1)))),
          D));
      local_scalar_t__ neg_half_lscale2 = DUMMY_VAR__;
      current_statement__ = 119;
      neg_half_lscale2 = (-0.25 *
        stan::math::square(
          stan::model::rvalue(lscale, "lscale", stan::model::index_uni(1))));
      current_statement__ = 122;
      for (int m = 1; m <= NB; ++m) {
        current_statement__ = 120;
        stan::model::assign(out, (constant *
          stan::math::exp((neg_half_lscale2 *
            stan::math::dot_self(
              stan::model::rvalue(x, "x", stan::model::index_uni(m)))))),
          "assigning variable out", stan::model::index_uni(m));
      }
    } else {
      local_scalar_t__ constant = DUMMY_VAR__;
      current_statement__ = 111;
      constant = (sdgp *
        stan::math::sqrt(
          (stan::math::pow(stan::math::sqrt((2 * stan::math::pi())), D) *
          stan::math::prod(lscale))));
      current_statement__ = 112;
      stan::math::validate_non_negative_index("neg_half_lscale2", "Dls", Dls);
      Eigen::Matrix<local_scalar_t__,-1,1> neg_half_lscale2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Dls, DUMMY_VAR__);
      current_statement__ = 113;
      stan::model::assign(neg_half_lscale2,
        stan::math::multiply(-0.25, stan::math::square(lscale)),
        "assigning variable neg_half_lscale2");
      current_statement__ = 116;
      for (int m = 1; m <= NB; ++m) {
        current_statement__ = 114;
        stan::model::assign(out, (constant *
          stan::math::exp(
            stan::math::dot_product(neg_half_lscale2,
              stan::math::square(
                stan::model::rvalue(x, "x", stan::model::index_uni(m)))))),
          "assigning variable out", stan::model::index_uni(m));
      }
    }
    current_statement__ = 125;
    return stan::math::add(1e-12, out);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__>,-1,1>
gpa(const T0__& X_arg__, const T1__& sdgp, const T2__& lscale_arg__,
    const T3__& zgp_arg__, const std::vector<Eigen::Matrix<T4__,-1,1>>&
    slambda, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__>;
  int current_statement__ = 0;
  const auto& X = stan::math::to_ref(X_arg__);
  const auto& lscale = stan::math::to_ref(lscale_arg__);
  const auto& zgp = stan::math::to_ref(zgp_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 127;
    stan::math::validate_non_negative_index("diag_spd", "cols(X)",
      stan::math::cols(X));
    Eigen::Matrix<local_scalar_t__,-1,1> diag_spd =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::cols(X),
        DUMMY_VAR__);
    current_statement__ = 128;
    stan::model::assign(diag_spd,
      sqrt_spd_cov_exp_quad(slambda, sdgp, lscale, pstream__),
      "assigning variable diag_spd");
    current_statement__ = 129;
    return stan::math::multiply(X, stan::math::elt_multiply(diag_spd, zgp));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class homoscedastic_model final : public model_base_crtp<homoscedastic_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,1> Y_data__;
  int Kgp_1;
  int Dgp_1;
  int NBgp_1;
  Eigen::Matrix<double,-1,-1> Xgp_1_data__;
  std::vector<Eigen::Matrix<double,-1,1>> slambda_1;
  int Kgp_sigma_1;
  int Dgp_sigma_1;
  int NBgp_sigma_1;
  Eigen::Matrix<double,-1,-1> Xgp_sigma_1_data__;
  std::vector<Eigen::Matrix<double,-1,1>> slambda_sigma_1;
  int prior_only;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xgp_1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xgp_sigma_1{nullptr, 0, 0};
 public:
  ~homoscedastic_model() {}
  homoscedastic_model(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "homoscedastic_model_namespace::homoscedastic_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 37;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 39;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 39;
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          current_statement__ = 39;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 40;
      context__.validate_dims("data initialization", "Kgp_1", "int",
        std::vector<size_t>{});
      Kgp_1 = std::numeric_limits<int>::min();
      current_statement__ = 40;
      Kgp_1 = context__.vals_i("Kgp_1")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "Kgp_1", Kgp_1, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "Dgp_1", "int",
        std::vector<size_t>{});
      Dgp_1 = std::numeric_limits<int>::min();
      current_statement__ = 41;
      Dgp_1 = context__.vals_i("Dgp_1")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "Dgp_1", Dgp_1, 1);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "NBgp_1", "int",
        std::vector<size_t>{});
      NBgp_1 = std::numeric_limits<int>::min();
      current_statement__ = 42;
      NBgp_1 = context__.vals_i("NBgp_1")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "NBgp_1", NBgp_1, 1);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("Xgp_1", "N", N);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("Xgp_1", "NBgp_1", NBgp_1);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "Xgp_1", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(NBgp_1)});
      Xgp_1_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, NBgp_1,
                       std::numeric_limits<double>::quiet_NaN());
      new (&Xgp_1)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xgp_1_data__.data(), N,
        NBgp_1);
      {
        std::vector<local_scalar_t__> Xgp_1_flat__;
        current_statement__ = 45;
        Xgp_1_flat__ = context__.vals_r("Xgp_1");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= NBgp_1; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 45;
            stan::model::assign(Xgp_1, Xgp_1_flat__[(pos__ - 1)],
              "assigning variable Xgp_1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 45;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      stan::math::validate_non_negative_index("slambda_1", "NBgp_1", NBgp_1);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("slambda_1", "Dgp_1", Dgp_1);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "slambda_1", "double",
        std::vector<size_t>{static_cast<size_t>(NBgp_1),
          static_cast<size_t>(Dgp_1)});
      slambda_1 = std::vector<Eigen::Matrix<double,-1,1>>(NBgp_1,
                    Eigen::Matrix<double,-1,1>::Constant(Dgp_1,
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> slambda_1_flat__;
        current_statement__ = 48;
        slambda_1_flat__ = context__.vals_r("slambda_1");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= Dgp_1; ++sym1__) {
          current_statement__ = 48;
          for (int sym2__ = 1; sym2__ <= NBgp_1; ++sym2__) {
            current_statement__ = 48;
            stan::model::assign(slambda_1, slambda_1_flat__[(pos__ - 1)],
              "assigning variable slambda_1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 48;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 49;
      context__.validate_dims("data initialization", "Kgp_sigma_1", "int",
        std::vector<size_t>{});
      Kgp_sigma_1 = std::numeric_limits<int>::min();
      current_statement__ = 49;
      Kgp_sigma_1 = context__.vals_i("Kgp_sigma_1")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "Kgp_sigma_1",
        Kgp_sigma_1, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "Dgp_sigma_1", "int",
        std::vector<size_t>{});
      Dgp_sigma_1 = std::numeric_limits<int>::min();
      current_statement__ = 50;
      Dgp_sigma_1 = context__.vals_i("Dgp_sigma_1")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "Dgp_sigma_1",
        Dgp_sigma_1, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "NBgp_sigma_1", "int",
        std::vector<size_t>{});
      NBgp_sigma_1 = std::numeric_limits<int>::min();
      current_statement__ = 51;
      NBgp_sigma_1 = context__.vals_i("NBgp_sigma_1")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "NBgp_sigma_1",
        NBgp_sigma_1, 1);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("Xgp_sigma_1", "N", N);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("Xgp_sigma_1", "NBgp_sigma_1",
        NBgp_sigma_1);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "Xgp_sigma_1", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(NBgp_sigma_1)});
      Xgp_sigma_1_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                             NBgp_sigma_1,
                             std::numeric_limits<double>::quiet_NaN());
      new (&Xgp_sigma_1)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xgp_sigma_1_data__.data(), N,
        NBgp_sigma_1);
      {
        std::vector<local_scalar_t__> Xgp_sigma_1_flat__;
        current_statement__ = 54;
        Xgp_sigma_1_flat__ = context__.vals_r("Xgp_sigma_1");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= NBgp_sigma_1; ++sym1__) {
          current_statement__ = 54;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 54;
            stan::model::assign(Xgp_sigma_1, Xgp_sigma_1_flat__[(pos__ - 1)],
              "assigning variable Xgp_sigma_1",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 54;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 55;
      stan::math::validate_non_negative_index("slambda_sigma_1",
        "NBgp_sigma_1", NBgp_sigma_1);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("slambda_sigma_1",
        "Dgp_sigma_1", Dgp_sigma_1);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "slambda_sigma_1",
        "double",
        std::vector<size_t>{static_cast<size_t>(NBgp_sigma_1),
          static_cast<size_t>(Dgp_sigma_1)});
      slambda_sigma_1 = std::vector<Eigen::Matrix<double,-1,1>>(NBgp_sigma_1,
                          Eigen::Matrix<double,-1,1>::Constant(Dgp_sigma_1,
                            std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> slambda_sigma_1_flat__;
        current_statement__ = 57;
        slambda_sigma_1_flat__ = context__.vals_r("slambda_sigma_1");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= Dgp_sigma_1; ++sym1__) {
          current_statement__ = 57;
          for (int sym2__ = 1; sym2__ <= NBgp_sigma_1; ++sym2__) {
            current_statement__ = 57;
            stan::model::assign(slambda_sigma_1,
              slambda_sigma_1_flat__[(pos__ - 1)],
              "assigning variable slambda_sigma_1",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 57;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 58;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 58;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 59;
      stan::math::validate_non_negative_index("zgp_1", "NBgp_1", NBgp_1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("zgp_sigma_1", "NBgp_sigma_1",
        NBgp_sigma_1);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("vsdgp_1", "Kgp_1", Kgp_1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("vlscale_1", "Kgp_1", Kgp_1);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("vlscale_1", "1", 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("vsdgp_sigma_1", "Kgp_sigma_1",
        Kgp_sigma_1);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("vlscale_sigma_1",
        "Kgp_sigma_1", Kgp_sigma_1);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("vlscale_sigma_1", "1", 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + NBgp_1 + 1 + 1 + 1 + NBgp_sigma_1;
  }
  inline std::string model_name() const final {
    return "homoscedastic_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.1",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "homoscedastic_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 1;
      Intercept = in__.template read<local_scalar_t__>();
      local_scalar_t__ sdgp_1 = DUMMY_VAR__;
      current_statement__ = 2;
      sdgp_1 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      local_scalar_t__ lscale_1 = DUMMY_VAR__;
      current_statement__ = 3;
      lscale_1 = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> zgp_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NBgp_1, DUMMY_VAR__);
      current_statement__ = 4;
      zgp_1 = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(NBgp_1);
      local_scalar_t__ Intercept_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      Intercept_sigma = in__.template read<local_scalar_t__>();
      local_scalar_t__ sdgp_sigma_1 = DUMMY_VAR__;
      current_statement__ = 6;
      sdgp_sigma_1 = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      local_scalar_t__ lscale_sigma_1 = DUMMY_VAR__;
      current_statement__ = 7;
      lscale_sigma_1 = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> zgp_sigma_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NBgp_sigma_1,
          DUMMY_VAR__);
      current_statement__ = 8;
      zgp_sigma_1 = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(NBgp_sigma_1);
      Eigen::Matrix<local_scalar_t__,-1,1> vsdgp_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kgp_1, DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> vlscale_1 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(Kgp_1,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> vsdgp_sigma_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kgp_sigma_1,
          DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> vlscale_sigma_1 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(Kgp_sigma_1,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__));
      current_statement__ = 15;
      stan::model::assign(vsdgp_1, sdgp_1, "assigning variable vsdgp_1",
        stan::model::index_uni(1));
      current_statement__ = 16;
      stan::model::assign(vlscale_1, lscale_1,
        "assigning variable vlscale_1", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 17;
      stan::model::assign(vsdgp_sigma_1, sdgp_sigma_1,
        "assigning variable vsdgp_sigma_1", stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(vlscale_sigma_1, lscale_sigma_1,
        "assigning variable vlscale_sigma_1", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "vsdgp_1", vsdgp_1, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "vlscale_1", vlscale_1,
        0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "vsdgp_sigma_1",
        vsdgp_sigma_1, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "vlscale_sigma_1",
        vlscale_sigma_1, 0);
      {
        current_statement__ = 19;
        stan::math::validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 20;
        stan::model::assign(mu,
          stan::math::add(
            stan::math::add(Intercept, stan::math::rep_vector(0, N)),
            gpa(Xgp_1,
              stan::model::rvalue(vsdgp_1, "vsdgp_1",
                stan::model::index_uni(1)),
              stan::model::rvalue(vlscale_1, "vlscale_1",
                stan::model::index_uni(1)), zgp_1, slambda_1, pstream__)),
          "assigning variable mu");
        current_statement__ = 21;
        stan::math::validate_non_negative_index("sigma", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> sigma =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 22;
        stan::model::assign(sigma,
          stan::math::add(Intercept_sigma, stan::math::rep_vector(0, N)),
          "assigning variable sigma");
        current_statement__ = 25;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 23;
          stan::model::assign(sigma,
            stan::math::exp(
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(n))),
            "assigning variable sigma", stan::model::index_uni(n));
        }
        current_statement__ = 26;
        lp_accum__.add(stan::math::student_t_lpdf<false>(Intercept, 3, -13,
                         36));
        current_statement__ = 27;
        lp_accum__.add((stan::math::student_t_lpdf<false>(vsdgp_1, 3, 0, 36)
          - (1 * stan::math::student_t_lccdf(0, 3, 0, 36))));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<false>(zgp_1, 0, 1));
        current_statement__ = 29;
        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                         stan::model::rvalue(vlscale_1, "vlscale_1",
                           stan::model::index_uni(1)), 1.124909, 0.0177));
        current_statement__ = 30;
        lp_accum__.add(stan::math::student_t_lpdf<false>(Intercept_sigma, 3,
                         0, 10));
        current_statement__ = 31;
        lp_accum__.add((stan::math::student_t_lpdf<false>(vsdgp_sigma_1, 3,
                          0, 36) - (1 *
          stan::math::student_t_lccdf(0, 3, 0, 36))));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<false>(zgp_sigma_1, 0, 1));
        current_statement__ = 33;
        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                         stan::model::rvalue(vlscale_sigma_1,
                           "vlscale_sigma_1", stan::model::index_uni(1)),
                         1.124909, 0.0177));
        current_statement__ = 36;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 34;
          lp_accum__.add(stan::math::normal_lpdf<false>(Y, mu, sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "homoscedastic_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      Intercept = in__.template read<local_scalar_t__>();
      double sdgp_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sdgp_1 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      double lscale_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      lscale_1 = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> zgp_1 =
        Eigen::Matrix<double,-1,1>::Constant(NBgp_1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      zgp_1 = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(NBgp_1);
      double Intercept_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      Intercept_sigma = in__.template read<local_scalar_t__>();
      double sdgp_sigma_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sdgp_sigma_1 = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      double lscale_sigma_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      lscale_sigma_1 = in__.template read_constrain_lb<local_scalar_t__,
                         jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> zgp_sigma_1 =
        Eigen::Matrix<double,-1,1>::Constant(NBgp_sigma_1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      zgp_sigma_1 = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(NBgp_sigma_1);
      Eigen::Matrix<double,-1,1> vsdgp_1 =
        Eigen::Matrix<double,-1,1>::Constant(Kgp_1,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> vlscale_1 =
        std::vector<Eigen::Matrix<double,-1,1>>(Kgp_1,
          Eigen::Matrix<double,-1,1>::Constant(1,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> vsdgp_sigma_1 =
        Eigen::Matrix<double,-1,1>::Constant(Kgp_sigma_1,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> vlscale_sigma_1 =
        std::vector<Eigen::Matrix<double,-1,1>>(Kgp_sigma_1,
          Eigen::Matrix<double,-1,1>::Constant(1,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(Intercept);
      out__.write(sdgp_1);
      out__.write(lscale_1);
      out__.write(zgp_1);
      out__.write(Intercept_sigma);
      out__.write(sdgp_sigma_1);
      out__.write(lscale_sigma_1);
      out__.write(zgp_sigma_1);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 15;
      stan::model::assign(vsdgp_1, sdgp_1, "assigning variable vsdgp_1",
        stan::model::index_uni(1));
      current_statement__ = 16;
      stan::model::assign(vlscale_1, lscale_1,
        "assigning variable vlscale_1", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 17;
      stan::model::assign(vsdgp_sigma_1, sdgp_sigma_1,
        "assigning variable vsdgp_sigma_1", stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(vlscale_sigma_1, lscale_sigma_1,
        "assigning variable vlscale_sigma_1", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "vsdgp_1", vsdgp_1, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "vlscale_1", vlscale_1,
        0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "vsdgp_sigma_1",
        vsdgp_sigma_1, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "vlscale_sigma_1",
        vlscale_sigma_1, 0);
      if (emit_transformed_parameters__) {
        out__.write(vsdgp_1);
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Kgp_1; ++sym2__) {
            out__.write(vlscale_1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(vsdgp_sigma_1);
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Kgp_sigma_1; ++sym2__) {
            out__.write(vlscale_sigma_1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double b_Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      b_Intercept = Intercept;
      double b_sigma_Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      b_sigma_Intercept = Intercept_sigma;
      out__.write(b_Intercept);
      out__.write(b_sigma_Intercept);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 1;
      Intercept = in__.read<local_scalar_t__>();
      out__.write(Intercept);
      local_scalar_t__ sdgp_1 = DUMMY_VAR__;
      current_statement__ = 2;
      sdgp_1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sdgp_1);
      local_scalar_t__ lscale_1 = DUMMY_VAR__;
      current_statement__ = 3;
      lscale_1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lscale_1);
      Eigen::Matrix<local_scalar_t__,-1,1> zgp_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NBgp_1, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(zgp_1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(NBgp_1),
        "assigning variable zgp_1");
      out__.write(zgp_1);
      local_scalar_t__ Intercept_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      Intercept_sigma = in__.read<local_scalar_t__>();
      out__.write(Intercept_sigma);
      local_scalar_t__ sdgp_sigma_1 = DUMMY_VAR__;
      current_statement__ = 6;
      sdgp_sigma_1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sdgp_sigma_1);
      local_scalar_t__ lscale_sigma_1 = DUMMY_VAR__;
      current_statement__ = 7;
      lscale_sigma_1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lscale_sigma_1);
      Eigen::Matrix<local_scalar_t__,-1,1> zgp_sigma_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NBgp_sigma_1,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(zgp_sigma_1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(NBgp_sigma_1),
        "assigning variable zgp_sigma_1");
      out__.write(zgp_sigma_1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "Intercept",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sdgp_1", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "lscale_1",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "zgp_1", "double",
        std::vector<size_t>{static_cast<size_t>(NBgp_1)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "Intercept_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sdgp_sigma_1",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "lscale_sigma_1",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "zgp_sigma_1",
        "double", std::vector<size_t>{static_cast<size_t>(NBgp_sigma_1)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 1;
      Intercept = context__.vals_r("Intercept")[(1 - 1)];
      out__.write(Intercept);
      local_scalar_t__ sdgp_1 = DUMMY_VAR__;
      current_statement__ = 2;
      sdgp_1 = context__.vals_r("sdgp_1")[(1 - 1)];
      out__.write_free_lb(0, sdgp_1);
      local_scalar_t__ lscale_1 = DUMMY_VAR__;
      current_statement__ = 3;
      lscale_1 = context__.vals_r("lscale_1")[(1 - 1)];
      out__.write_free_lb(0, lscale_1);
      Eigen::Matrix<local_scalar_t__,-1,1> zgp_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NBgp_1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zgp_1_flat__;
        current_statement__ = 4;
        zgp_1_flat__ = context__.vals_r("zgp_1");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= NBgp_1; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(zgp_1, zgp_1_flat__[(pos__ - 1)],
            "assigning variable zgp_1", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(zgp_1);
      local_scalar_t__ Intercept_sigma = DUMMY_VAR__;
      current_statement__ = 5;
      Intercept_sigma = context__.vals_r("Intercept_sigma")[(1 - 1)];
      out__.write(Intercept_sigma);
      local_scalar_t__ sdgp_sigma_1 = DUMMY_VAR__;
      current_statement__ = 6;
      sdgp_sigma_1 = context__.vals_r("sdgp_sigma_1")[(1 - 1)];
      out__.write_free_lb(0, sdgp_sigma_1);
      local_scalar_t__ lscale_sigma_1 = DUMMY_VAR__;
      current_statement__ = 7;
      lscale_sigma_1 = context__.vals_r("lscale_sigma_1")[(1 - 1)];
      out__.write_free_lb(0, lscale_sigma_1);
      Eigen::Matrix<local_scalar_t__,-1,1> zgp_sigma_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NBgp_sigma_1,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> zgp_sigma_1_flat__;
        current_statement__ = 8;
        zgp_sigma_1_flat__ = context__.vals_r("zgp_sigma_1");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= NBgp_sigma_1; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(zgp_sigma_1, zgp_sigma_1_flat__[(pos__ - 1)],
            "assigning variable zgp_sigma_1", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(zgp_sigma_1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"Intercept", "sdgp_1", "lscale_1",
                "zgp_1", "Intercept_sigma", "sdgp_sigma_1", "lscale_sigma_1",
                "zgp_sigma_1"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"vsdgp_1", "vlscale_1", "vsdgp_sigma_1", "vlscale_sigma_1"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"b_Intercept", "b_sigma_Intercept"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(NBgp_1)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(NBgp_sigma_1)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(Kgp_1)},
             std::vector<size_t>{static_cast<size_t>(Kgp_1),
               static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(Kgp_sigma_1)},
             std::vector<size_t>{static_cast<size_t>(Kgp_sigma_1),
               static_cast<size_t>(1)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "sdgp_1");
    param_names__.emplace_back(std::string() + "lscale_1");
    for (int sym1__ = 1; sym1__ <= NBgp_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "zgp_1" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "Intercept_sigma");
    param_names__.emplace_back(std::string() + "sdgp_sigma_1");
    param_names__.emplace_back(std::string() + "lscale_sigma_1");
    for (int sym1__ = 1; sym1__ <= NBgp_sigma_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "zgp_sigma_1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Kgp_1; ++sym1__) {
        param_names__.emplace_back(std::string() + "vsdgp_1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kgp_1; ++sym2__) {
          param_names__.emplace_back(std::string() + "vlscale_1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Kgp_sigma_1; ++sym1__) {
        param_names__.emplace_back(std::string() + "vsdgp_sigma_1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kgp_sigma_1; ++sym2__) {
          param_names__.emplace_back(std::string() + "vlscale_sigma_1" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_Intercept");
      param_names__.emplace_back(std::string() + "b_sigma_Intercept");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "sdgp_1");
    param_names__.emplace_back(std::string() + "lscale_1");
    for (int sym1__ = 1; sym1__ <= NBgp_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "zgp_1" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "Intercept_sigma");
    param_names__.emplace_back(std::string() + "sdgp_sigma_1");
    param_names__.emplace_back(std::string() + "lscale_sigma_1");
    for (int sym1__ = 1; sym1__ <= NBgp_sigma_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "zgp_sigma_1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Kgp_1; ++sym1__) {
        param_names__.emplace_back(std::string() + "vsdgp_1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kgp_1; ++sym2__) {
          param_names__.emplace_back(std::string() + "vlscale_1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Kgp_sigma_1; ++sym1__) {
        param_names__.emplace_back(std::string() + "vsdgp_sigma_1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Kgp_sigma_1; ++sym2__) {
          param_names__.emplace_back(std::string() + "vlscale_sigma_1" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_Intercept");
      param_names__.emplace_back(std::string() + "b_sigma_Intercept");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sdgp_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lscale_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"zgp_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NBgp_1) + "},\"block\":\"parameters\"},{\"name\":\"Intercept_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sdgp_sigma_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lscale_sigma_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"zgp_sigma_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NBgp_sigma_1) + "},\"block\":\"parameters\"},{\"name\":\"vsdgp_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kgp_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"vlscale_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Kgp_1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"vsdgp_sigma_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kgp_sigma_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"vlscale_sigma_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Kgp_sigma_1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_sigma_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sdgp_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lscale_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"zgp_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NBgp_1) + "},\"block\":\"parameters\"},{\"name\":\"Intercept_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sdgp_sigma_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lscale_sigma_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"zgp_sigma_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NBgp_sigma_1) + "},\"block\":\"parameters\"},{\"name\":\"vsdgp_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kgp_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"vlscale_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Kgp_1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"vsdgp_sigma_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kgp_sigma_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"vlscale_sigma_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Kgp_sigma_1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b_sigma_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + 1) + NBgp_1) + 1) + 1) + 1) +
      NBgp_sigma_1);
    const size_t num_transformed = emit_transformed_parameters * ((((Kgp_1 +
      (Kgp_1 * 1)) + Kgp_sigma_1) + (Kgp_sigma_1 * 1)));
    const size_t num_gen_quantities = emit_generated_quantities * ((1 + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + 1) + NBgp_1) + 1) + 1) + 1) +
      NBgp_sigma_1);
    const size_t num_transformed = emit_transformed_parameters * ((((Kgp_1 +
      (Kgp_1 * 1)) + Kgp_sigma_1) + (Kgp_sigma_1 * 1)));
    const size_t num_gen_quantities = emit_generated_quantities * ((1 + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = homoscedastic_model_namespace::homoscedastic_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return homoscedastic_model_namespace::profiles__;
}
#endif