---
title:  Approximately whitening a normal distribution
---
```{julia}
using WarmupHMC
using LinearAlgebra, Distributions, LogDensityProblems, Random

ProductPosterior = WarmupHMC.ProductPosterior
ScaledLogDensity = WarmupHMC.ScaledLogDensity

```
```{julia}
rng = Xoshiro(0)
n_parameters = 20
rdist = ProductPosterior(fill(Normal(), n_parameters))
scaling = Diagonal((exp.(-sort(randn(rng, n_parameters)))))
display(diag(scaling)')
display(1 ./ diag(scaling)')
rotation = qr(randn(rng, (n_parameters, n_parameters))).Q
dist = ScaledLogDensity(
    rdist,
    scaling * rotation
)

dists = [
    approximately_whitened(dist; rng=Xoshiro(i), twosided=ts)# |> approximately_whitened
    for i in 1:40, ts in [true, :first, false]
]
conds = cond.(getproperty.(dists, :transform))
display("$(round(cond(dist.transform))) -> $(round.(exp.(mean(log.(conds), dims=1))))")
# display(mean(log.(conds[:, 1:2] ./ conds[:, 3]), dims=1))
```
```{julia}
rng = Xoshiro(0)
n_parameters = 20
rdist = ProductPosterior([TDist(3) for i in 1:n_parameters])
scaling = Diagonal((exp.(-2sort(randn(rng, n_parameters)))))
display(diag(scaling)')
display(1 ./ diag(scaling)')
rotation = qr(randn(rng, (n_parameters, n_parameters))).Q
dist = ScaledLogDensity(
    rdist,
    scaling * rotation
)

dists = [
    approximately_whitened(dist; rng=Xoshiro(i), twosided=ts)
    for i in 1:40, ts in [true, :first, false]
]
conds = cond.(getproperty.(dists, :transform))
display("$(round(cond(dist.transform))) -> $(round.(exp.(mean(log.(conds), dims=1))))")
# display(mean(log.(conds[:, 1:2] ./ conds[:, 3]), dims=1))
```
```{julia}

rng = Xoshiro(0)
n_parameters = 10
rdist = ProductPosterior(fill(Laplace(), n_parameters))
# rdist = ADgradient(:ReverseDiff, rdist; compile=Val(false))
scaling = Diagonal((exp.(-sort(randn(rng, n_parameters)))))
display(diag(scaling)')
display(1 ./ diag(scaling)')
rotation = qr(randn(rng, (n_parameters, n_parameters))).Q
dist = ScaledLogDensity(
    rdist,
    scaling * rotation
)
display(cond(dist.transform))

dists = [
    approximately_whitened(dist; n_iterations=1, rng=Xoshiro(i), twosided=ts)
    for i in 1:40, ts in [true, :first, false]
]
dists = [
    dist for dist in dists if all(isfinite.(dist.transform))
]
conds = cond.(getproperty.(dists, :transform))
display("$(round(cond(dist.transform))) -> $(round.(exp.(mean(log.(conds), dims=1))))")
```